package main

import "strings"

// This code is for a handler. Makes adding endpoints easier
// Not comprehensive or pattern understanding, just makes direct endpoints

type HttpRequest struct {
  Method   string
  Route    string
  Protocol string
  Header   map[string]string 
  Body     string
}

// Creates an HttpRequest from raw byte data. Parses into a convenient form factor
func ParseHttpRequest(rawData []byte) HttpRequest {
  stringData := string(rawData)

  // Parses the CR LF characters to read the request
  parsedLines := strings.Split(stringData, "\r\n")
  
  // Gets the request info and parses it into a slice
  requestInfo := strings.Split(parsedLines[0], " ")
  
  // Set the header key value map
  var header map[string]string
  for _, value := range parsedLines[1:len(parsedLines)-1] {
    headerKeyAndValue := strings.Split(value, ": ")
    header[headerKeyAndValue[0]] = headerKeyAndValue[1]
  }

  // TODO: Manage different types of requests
  return HttpRequest{
    requestInfo[0], // Method
    requestInfo[1], // Route
    requestInfo[2], // Protocol
    
    header, // Header
    parsedLines[len(parsedLines)-1], // Body
  }
}

// Manages a set of routes and requests
type HttpHandler struct {
  Routes map[string]func(request HttpRequest) error
}

func (w *HttpHandler) RegisterRoute(route string, handler func(WebData []byte) error)) {
  
}

func (w *HttpHandler) HandleRequest(route string, )
